name: Build and deploy the dev branch to GKE

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: my-first-project
  PROJECT_DEV: my-first-project
  GKE_CLUSTER: my-first-cluster
  GKE_ZONE: europe-central2-a
  GKE_URL: europe-central2-docker.pkg.dev
  IMAGE: person
  FULL_IMAGE: europe-central2-docker.pkg.dev/my-first-project/person
  DEPLOYMENT_NAME: my-first-deployment
  DEPLOYMENT_PROFILE: dev

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v0
        with:
          service_account_key: ${{ secrets.GKE_DEV_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      # Configure Docker to use the gcloud command-line tool as a credential helper for authentication
      - run: gcloud --quiet auth configure-docker $GKE_URL

      # Builds the project, creates the docker image and pushes it to the local docker
      - name: Build with Maven
        run: mvn compile jib:dockerBuild

      # Add remote tag before pushing
      - name: Remote tag
        run: docker tag $IMAGE $FULL_IMAGE:$GITHUB_SHA

      # Push the Docker image to Google Artifact Registry
      - name: Publish
        run: docker push $FULL_IMAGE:$GITHUB_SHA

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v0
        with:
          service_account_key: ${{ secrets.GKE_DEV_SA_KEY }}
          project_id: ${{ env.PROJECT_DEV }}

      # Get the GKE credentials so we can deploy to the cluster
      - name: Set up GKE credentials
        run: |-
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          kustomize edit set image __FULL_IMAGE_GITHUB_SHA__=$FULL_IMAGE:$GITHUB_SHA
          kustomize build . > deployment1.yaml
          
          sed -e 's|__IMAGE__|${{env.IMAGE}}|g' deployment1.yaml > deployment2.yaml
          sed -e 's|__PROFILE__|${{env.DEPLOYMENT_PROFILE}}|g' deployment2.yaml > deployment3.yaml
          kubectl apply -f deployment3.yaml
          
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide
